"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var command_line_args_1 = __importDefault(require("command-line-args"));
var directory = process.env.NODE_CONFIG_DIR;
process.env.NODE_CONFIG_DIR = path_1.default.join(__dirname, '../config');
var getConfig_1 = require("./api/getConfig");
var mainCommand_1 = require("./commands/mainCommand");
var constants_1 = require("./constants");
var setConfig_1 = require("./api/setConfig");
process.env.NODE_CONFIG_DIR = directory;
// Uncomment below while running via localhost api
//process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
function d360(processArgs) {
    var argsFromCli = (0, command_line_args_1.default)(constants_1.DefaultMainArgs, { partial: true, argv: processArgs });
    var argsCommand = argsFromCli.command || false;
    var command = argsCommand || '';
    if (!command) {
        command = "help";
    }
    if (command == "help") {
        argsFromCli.help = true;
    }
    try {
        if (command == "help") {
            return Promise.resolve((0, mainCommand_1.loadGlobalHelpCommand)());
        }
        var currentCommand = (0, mainCommand_1.load)(command);
        if (argsFromCli.help) {
            return Promise.resolve((0, mainCommand_1.loadHelpCommand)(currentCommand));
        }
        var currentCommandArgs = (0, command_line_args_1.default)(currentCommand.args, { argv: argsFromCli._unknown || [] });
        if (!currentCommandArgs.apiKey)
            currentCommandArgs.apiKey = (0, getConfig_1.getAPIKey)();
        if (!currentCommandArgs.apihubUrl) {
            currentCommandArgs.apihubUrl = (0, getConfig_1.getApiHubUrl)();
        }
        else {
            (0, setConfig_1.setApiHubUrl)(currentCommandArgs.apihubUrl);
        }
        if (!currentCommandArgs.userId)
            currentCommandArgs.userId = (0, getConfig_1.getUserId)();
        return currentCommand.run(currentCommandArgs).then(function (currentCommandArgs) {
            return currentCommandArgs;
        });
    }
    catch (exception) {
        return Promise.reject(exception);
    }
}
exports.default = d360;
