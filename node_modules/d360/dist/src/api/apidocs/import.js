"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
//import chalk from "chalk";
var form_data_1 = __importDefault(require("form-data"));
var fs_1 = __importDefault(require("fs"));
var node_fetch_1 = require("node-fetch");
var ora_1 = __importDefault(require("ora"));
var consoleWrapper_1 = require("../../helper/consoleWrapper");
var isCI_1 = require("../../helper/isCI");
var isURL_1 = require("../../helper/isURL");
var models_1 = require("../../models");
var d360APIFetch_1 = __importDefault(require("../d360APIFetch"));
function importFlow(options) {
    return __awaiter(this, void 0, void 0, function () {
        var spinner, formData, requestOptions, requestUrl, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spinner = (0, ora_1.default)({ text: "Importing.." });
                    spinner.start();
                    formData = getImportRequestFormData(options);
                    requestOptions = {
                        method: "POST",
                        body: formData,
                        headers: new node_fetch_1.Headers({
                            api_token: options.apiKey,
                        }),
                    };
                    requestUrl = "/v2/apidocs/import/".concat(options.userId);
                    if (options.publish) {
                        requestUrl += "/?publishArticles=true";
                    }
                    return [4 /*yield*/, (0, d360APIFetch_1.default)(requestUrl, requestOptions)];
                case 1:
                    response = _a.sent();
                    spinner.stop();
                    handleImportResponse(response);
                    return [2 /*return*/];
            }
        });
    });
}
exports.default = importFlow;
function getImportRequestFormData(options) {
    var _a;
    var formData = new form_data_1.default();
    if (!(0, isURL_1.isURL)(options.path)) {
        var stream = fs_1.default.createReadStream(options.path);
        formData.append("file", stream);
    }
    else {
        formData.append("url", options.path);
    }
    formData.append("projectVersionId", options.versionId);
    formData.append("sourceType", models_1.ApiReferenceSourceType.CommandLine);
    formData.append("operationType", models_1.ApiReferenceOperationType.Import);
    formData.append("ciName", (_a = (0, isCI_1.getCIName)()) !== null && _a !== void 0 ? _a : "command-line");
    if (options.force) {
        formData.append("proceedAnyway", "true");
    }
    return formData;
}
function handleImportResponse(response) {
    var _a, _b, _c, _d;
    if (response === null || response === void 0 ? void 0 : response.success) {
        var importWarnings = (_a = response === null || response === void 0 ? void 0 : response.result) === null || _a === void 0 ? void 0 : _a.warnings;
        var importErrors = (_b = response === null || response === void 0 ? void 0 : response.result) === null || _b === void 0 ? void 0 : _b.errors;
        var isServersAvailable = (_c = response === null || response === void 0 ? void 0 : response.result) === null || _c === void 0 ? void 0 : _c.is_server_available;
        var apiDefinitionImported = ((_d = response === null || response === void 0 ? void 0 : response.result) === null || _d === void 0 ? void 0 : _d.api_definition_id) != null ? true : false;
        if (importErrors == null && importWarnings == null && apiDefinitionImported == true) {
            (0, consoleWrapper_1.success)("Import Successful!");
        }
        else if (isServersAvailable != true && importWarnings.length < 1 && importErrors.length < 1) {
            showServerUnAwailableWarning(true);
        }
        else if (importWarnings.length > 0 && importErrors.length > 0) {
            (0, consoleWrapper_1.error)("Import failed! We found ".concat(importWarnings.length, " alert(s) and ").concat(importErrors.length, " errors. You can use --force to force import your spec file"));
            if (isServersAvailable == false) {
                showServerUnAwailableWarning(false);
            }
        }
        else if (importWarnings.length > 0) {
            (0, consoleWrapper_1.error)("Import failed! We found ".concat(importWarnings.length, " alert(s). You can use --force to force import your spec file"));
            if (isServersAvailable == false) {
                showServerUnAwailableWarning(false);
            }
        }
        else if (importErrors.length > 0) {
            (0, consoleWrapper_1.error)("Import failed! We found ".concat(importErrors.length, " errors. You can use --force to force import your spec file"));
            if (isServersAvailable == false) {
                showServerUnAwailableWarning(false);
            }
        }
    }
}
function showServerUnAwailableWarning(withForceInfo) {
    if (withForceInfo) {
        (0, consoleWrapper_1.warning)("You may not be able to use try-it feature. Looks like server variables arenâ€™t defined in your OpenAPI Specification file. You can use --force to force import your spec file");
    }
    else {
        (0, consoleWrapper_1.warning)("You may not be able to use try-it feature. Looks like server variables aren't defined in your OpenAPI Specification file.");
    }
}
