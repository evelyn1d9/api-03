"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadHelpCommand = exports.loadGlobalHelpCommand = exports.load = exports.commands = void 0;
var chalk_1 = __importDefault(require("chalk"));
var command_line_usage_1 = __importDefault(require("command-line-usage"));
var constants_1 = require("../constants");
var apidocs_1 = __importDefault(require("./apidocs/apidocs"));
var resync_1 = __importDefault(require("./apidocs/resync"));
var validate_1 = __importDefault(require("./apidocs/validate"));
exports.commands = {
    apidocs: apidocs_1.default,
    "apidocs:resync": resync_1.default,
    "apidocs:validate": validate_1.default,
};
function load(command) {
    if (!(command in exports.commands)) {
        throw new Error('Command not found.');
    }
    return new exports.commands[command]();
}
exports.load = load;
function loadGlobalHelpCommand() {
    var helpContent = [
        {
            header: chalk_1.default.underline('Usage'),
            content: "d360 <command> [arguments]"
        },
    ];
    setAllCommandCategories();
    constants_1.AllCommandDetails.forEach(function (command) {
        helpContent.push({
            header: chalk_1.default.underline(command.decsription),
            content: getSubCommandDetails(command.commands)
        });
    });
    return (0, command_line_usage_1.default)(helpContent);
}
exports.loadGlobalHelpCommand = loadGlobalHelpCommand;
function loadHelpCommand(command) {
    var helpContent = [
        {
            content: command.description,
            raw: true
        },
        {
            header: chalk_1.default.underline('Usage'),
            content: "d360 ".concat(command.usage)
        },
        {
            header: chalk_1.default.underline("Options"),
            optionList: command.args
        }
    ];
    return (0, command_line_usage_1.default)(helpContent);
}
exports.loadHelpCommand = loadHelpCommand;
function setAllCommandCategories() {
    Object.entries(exports.commands).forEach(function (currentCommand) {
        var command = new currentCommand[1]();
        var commandDetail = constants_1.AllCommandDetails.find(function (commandDetail) { return commandDetail.commandCategoryName == command.commandCategory; });
        commandDetail.commands.push({ name: command.command, description: command.description });
    });
}
function getSubCommandDetails(commands) {
    return commands.map(function (command) {
        return {
            name: "".concat(chalk_1.default.grey('$'), " d360 ").concat(command.name),
            description: command.description
        };
    });
}
